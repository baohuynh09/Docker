
#----------------------------------------------#
#         Securing Docker Container            #
#----------------------------------------------#
Resource isolation 
Root priviledge / using non-root user instead ?
SELinux-inspiration
Some use-case/best-practice for container security

#--------------------------------------------------#
#   Create a Continuous Integration Pipeline       #
#               Udemy cirriculum ?                 #
#--------------------------------------------------#



#--------------------------------------------------#
#          Test-Driven-Development (TDD)           #
#--------------------------------------------------#
Reference: "Learning Docker" Book - Chapter 9

Test-Driven-Development - A software development practice: 
(1) Writing a daft testcase that would fail
(2) Write the actual software that make the test pass
(3) Then refactor the code & repeat the cycle till the SW reaches the acceptable level.
(4) Create 
----------------------------------------
>>> Main difference with traditional way: 
    - Writing the Test first (based on requirement/Specs)
    - Then writing 'main' function, then F1 function, then F2 function, .....
    - Besides, also include needed package/lib (via pip/VIRTUALENV python,..)
    
                        +-------------------+
           +----------> | Make the Test pass| -------+
           |            +-------------------+        |
           |                    (2)                  |
 +--------------------+                              |
 |Write a falling test| (1)                          |
 +--------------------+                              |
           ^                                         |
           |                     (3)                 |
           |            <NO>  +--------+             |
           +----------------+ |Refactor| <-----------+
                              +--------+
                                   | <YES>
                                   | If (main code satisfied 'main' Test specs)
                                   |-----------------------|
                                                           |
                                                           v  (4)
                                               +-------------------+
                     (main code + main test)   | create Dockerfile | 
                                               +-------------------+
Ex: 
Suppose we have a sw to count "visit count" of each "user"
(1) writing testcase for counting "visit count" functionalities                           
    --> then run & fail (since no 'main' function for counting visit count is imported)
(2) writing the visit count 'main' function & rerun & still fails because of:
    - submodule for counting visit is not available
    - lack of supported lib python (pip install ...)
    --> reimplemente (3) and re-run cycle from (1) again

****  Again, better explanation at: "Learning Docker" Book, Chapter 9 ***

(4) 
Finally, when 'source code' and 'main test code' are satisfied,
Create a Docker file for testing inside a container:
    # ---------------------- #
    #        Dockerfile      #
    # ---------------------- #
    # Base image is python
    FROM python:latest
    # Author: Dr. Peter
    MAINTAINER Dr. Peter <peterindia@gmail.com>
    # Install redis driver for python and the redis mock
    RUN pip install redis && pip install mockredispy
    # Copy the test and source to the Docker image
    ADD src/ /src/
    # Change the working directory to /src/
    WORKDIR /src/
    # Make unittest as the default execution
    ENTRYPOINT python3 -m unittest

#--------------------------------------------------#
#    Using Docker container as 'runtime env'       #
#--------------------------------------------------#
In TDD, if dependencies lib/code is update 
--> re-run at actual env (host) until succesfull 
--> build updated Image (do whole process again if update lib happens)
>>> Solution : using container as 'runtime env' and create new image when running container

Ex: 
(1) docker run -it -v /home/peter/src/hitcount:/src python:latest /bin/bash
                            ^^^^^^^             ^^^                         
                (this stores app src code)   (mapping dir on container)     
(2) attach to container above and run test-case
    root-12345 $# cd /src
    root-12345 $# python -m unittest 
        Error: missing <module> redis
    root-12345 $# pip install redis
    root-12345 $# python -m unittest
        Error: missing <module> mockredis
    root-12345 $# python -m unittest
        hitcount: 05 ---> OK, code run     (OK, env contains all updated lib & run well)
                                           (It's time to create new Image)
    host-machine $# docker commit a8219ac7ed8e python_rediswithmock
                                     ^^^^            ^^^^^
                                (container env    (new Image name)
                                running above)

>>> New Image 'python_rediswithmock' (created during runtime) contains all updated libs/code changes.

